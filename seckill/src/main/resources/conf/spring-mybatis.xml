<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tool="http://www.springframework.org/schema/tool"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context-4.0.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	                    http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	                    http://www.springframework.org/schema/tool	                    
	                    http://www.springframework.org/schema/tool/spring-tool-4.0.xsd
	                 	http://www.springframework.org/schema/mvc
	                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	                    
	                    
	<!-- 引入配置文件   -->
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
        <property name="location" value="classpath:conf/jdbc.properties" />  
    </bean>
    
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="" destroy-method="close">
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  

        <property name="initialSize" value="${initialSize}"></property>  

        <property name="maxActive" value="${maxActive}"></property>  

		<!-- maxIdle该字段已过时 -->
        <property name="maxIdle" value="${maxIdle}"></property>

        <property name="minIdle" value="${minIdle}"></property>  

        <property name="maxWait" value="${maxWait}"></property>

		<property name="validationQuery" value="SELECT 1" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="false" />

		<!-- 配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />

		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />

	</bean>

	<!-- myBatis文件 -->
	<bean id="seckillSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:dao/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.ygy.common.seckill.dao" />
		<property name="sqlSessionFactoryBeanName" value="seckillSqlSessionFactory" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 这些开头的方法 设为只读事务 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="login*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<!-- 这些开头的方法 设为REQUIRED 如果存在一个事务 ，则支看当前事务。 如果没有则开启一个新事务 设为supports时 如果存在一个事务 
				，则支看当前事务。如果没有则安非事务处理 delete -->
			<tx:method name="insert*" propagation="REQUIRED" />	
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="make*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 
	<aop:config>    
        第一个"*"代表所有类, 第二个"*"代表所有方法, ".."代表任意参数    
        <aop:pointcut id="pointcut" expression="execution(* org.ygy.common.seckill.service.*.*(..))" />    
        把事务控制在service层    
        <aop:advisor pointcut-ref="pointcut" advice-ref="transactionAdvice" />    
    </aop:config> -->
	
	</beans>
	